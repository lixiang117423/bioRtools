% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/row_stat.R, R/scale01.R
\name{scale01_groups}
\alias{scale01_groups}
\title{Scale values within groups using dplyr}
\usage{
scale01_groups(data, cols, suffix = "_scaled", replace = FALSE)

scale01_groups(data, cols, suffix = "_scaled", replace = FALSE)
}
\arguments{
\item{data}{A grouped or ungrouped data frame}

\item{cols}{Columns to scale within each group}

\item{suffix}{Suffix for new scaled columns (default: "_scaled")}

\item{replace}{Logical. Replace original columns or create new ones (default: FALSE)}
}
\value{
A data frame with within-group scaled values

A data frame with within-group scaled values
}
\description{
Apply min-max scaling (0-1) to specified columns within each group.
This function is designed to work seamlessly with dplyr's group_by().

Apply min-max scaling (0-1) to specified columns within each group.
This function is designed to work seamlessly with dplyr's group_by().
}
\examples{
library(dplyr)

# Group by category and scale within each group
df <- data.frame(
  category = rep(c("A", "B"), each = 3),
  value1 = c(1, 3, 5, 2, 4, 6),
  value2 = c(10, 30, 50, 20, 40, 60)
)

df \%>\% 
  group_by(category) \%>\% 
  scale01_groups(cols = c("value1", "value2"))

library(dplyr)

# Group by category and scale within each group
df <- data.frame(
  category = rep(c("A", "B"), each = 3),
  value1 = c(1, 3, 5, 2, 4, 6),
  value2 = c(10, 30, 50, 20, 40, 60)
)

df \%>\% 
  group_by(category) \%>\% 
  scale01_groups(cols = c("value1", "value2"))

}
\author{
Xiang LI \email{lixiang117423@foxmail.com}
}
